For reading the data file, i used a BufferedReader to read and process the file line by line. For storing the tag data, i used an ArrayList to add tags as they are read from the file. The running time of reading the file is O(n), where n is the number of lines in the file.

To list the most and least popular tags, I created a TreeMap where the keys are the tag names and the values are the counts of the tags. The program then iterates through the ArrayList of tags then updates the counts in the TreeMap. I then used a PriorityQueue to sort the tags by their count, breaking ties with alphabetical order, and output the top three tags and the lowest tags. The running time is O(n log n), where n is the number of tags in the input file. Because the code creates a list of all tags and their counts, which takes O(n) time. Then it sorts this list using the built-in Collections.sort method that has a worst case run time of O(n log n) them, the code extracts the three most and three least popular tags, this takes constant time. 

To find tags by count, the program iterates through the TreeMap of tag counts and TreeSet objects looking for sets with a size equal to the given count. If the program finds a matching set it output its elements in alphabetical order. To find the count of a particular tag the program looks up the count in the TreeMap and outputs it. The running time of this is O(k log n), where k is the number of unique tag counts and n is the total number of tags. 